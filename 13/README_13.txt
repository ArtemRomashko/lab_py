# Лабораторна робота №13: Робота з масивами і рядками

## 1. Назва роботи
Лабораторна робота №1: Робота з масивами і рядками

## 2. Мета роботи
Ознайомитись з основними методами роботи з масивами та рядками в Python.

## 3. Опис завдання
Реалізувати набір функцій для роботи з масивами та рядками, включаючи інтерполяцію пропущених значень, обробку батчів, кодування та декодування рядків, обертання матриці, пошук шаблонів за допомогою регулярних виразів, злиття відсортованих масивів, визначення простих чисел, групування даних за ключем та вилучення аномалій зі списку.

## 4. Виконання роботи
1. Створено папку `lab1`.
2. Додано файли:
   - `main.py`: Основний код програми.
   - `README.md`: Інструкція з поясненням.
3. В основному коді реалізовано функції:
   - `interpolate_missing(numb)`: Інтерполяція пропущених значень у масиві.
   - `fibonacci(n)`: Генерація послідовності чисел Фібоначчі.
   - `process_batches(lst, batch_size)`: Обробка батчів у списку.
   - `encode_string(s)`: Кодування рядка за допомогою розширеного алгоритму додавання лічильників.
   - `decode_string(s)`: Декодування рядка, закодованого функцією `encode_string`.
   - `rotate_matrix(matrix)`: Обертання матриці на 90 градусів проти годинникової стрілки.
   - `regex_search(strings, pattern)`: Пошук рядків, які відповідають вказаному регулярному виразу.
   - `merge_sorted_arrays(arr1, arr2)`: Злиття двох відсортованих масивів у один.
   - `is_prime(num)`: Перевірка, чи є число простим.
   - `group_by_key(data, key)`: Групування елементів списку за значенням ключа.
   - `remove_outliers(lst)`: Вилучення викидів зі списку чисел.
   
## 5. Результати
Програма успішно реалізує всі вказані функції. Нижче наведено декілька прикладів використання.

### Приклади використання

```python
# Приклади використання функцій

# Інтерполяція пропущених значень
numb = [1, None, 3, None, 5]
print(interpolate_missing(numb))  # [1, 2, 3, 4, 5]

# Генерація чисел Фібоначчі
print(list(fibonacci(10)))  # [0, 1, 1, 2, 3, 5, 8, 13, 21, 34]

# Обробка батчів
lst = [1, 5, 2, 6, 3, 7, 4, 8]
print(process_batches(lst, 3))  # [5, 6, 7, 8]

# Кодування та декодування рядків
s = "AAAABBBCCDAA"
encoded = encode_string(s)
print(encoded)  # 4A3B2C1D2A
decoded = decode_string(encoded)
print(decoded)  # AAAABBBCCDAA

# Обертання матриці
matrix = [[1, 2, 3],
          [4, 5, 6],
          [7, 8, 9]]
print(rotate_matrix(matrix))  # [[3, 6, 9], [2, 5, 8], [1, 4, 7]]

# Пошук рядків за регулярним виразом
strings = ["apple", "banana", "cherry", "date"]
pattern = r"a"
print(regex_search(strings, pattern))  # ['apple', 'banana']

# Злиття відсортованих масивів
arr1 = [1, 3, 5, 7]
arr2 = [2, 4, 6, 8]
print(merge_sorted_arrays(arr1, arr2))  # [1, 2, 3, 4, 5, 6, 7, 8]

# Перевірка числа на простоту
print(is_prime(11))  # True

# Групування даних за ключем
data = [{'key': 'A', 'value': 10},
        {'key': 'B', 'value': 20},
        {'key': 'A', 'value': 30},
        {'key': 'C', 'value': 40}]
print(group_by_key(data, 'key'))  # {'A': [10, 30], 'B': [20], 'C': [40]}

# Вилучення викидів
lst = [1, 2, 3, 100, 5, 6, 200, 7, 8, 9]
print(remove_outliers(lst))  # [1, 2, 3, 5, 6, 7, 8, 9]

### 6. Висновки
Мета роботи досягнута. Функції успішно реалізовані і протестовані на прикладах використання.

### 7. Інструкції з запуску
Для запуску програми потрібен Python версії 3.x.