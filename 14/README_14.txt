# Лабораторна робота №14: Робота з логічними операціями

## 1. Назва роботи
Лабораторна робота №2: Робота з логічними операціями

## 2. Мета роботи
Ознайомитись із базовими логічними операціями та функціями в мові програмування Python.

## 3. Опис завдання
Реалізувати набір функцій, які виконують різні логічні операції, такі як перевірка істинності, еквівалентності, виключного або, умовне вітання, вкладені умови, підрахунок істинних значень у списку, визначення парності числа у двійковому представленні, більшість голосів, зміна значення, тернарна перевірка, валідація, ланцюгова перевірка, фільтрація і мультиплексування.

## 4. Виконання роботи
1. Створено папку `lab2`.
2. Додано файли:
   - `main.py`: Основний код програми.
   - `README.md`: Інструкція з поясненням.
3. В основному коді реалізовано функції:
   - `check_truth(a, b, c)`: Перевірка істинності.
   - `logical_equivalence(a, b)`: Логічна еквівалентність.
   - `xor(a, b)`: Виключне або (XOR).
   - `greet(is_hello)`: Умовне вітання.
   - `nested_condition(x, y, z)`: Вкладені умови.
   - `count_true(bool_list)`: Підрахунок істинних значень у списку.
   - `parity(number)`: Визначення парності числа.
   - `majority_vote(a, b, c)`: Більшість голосів.
   - `switch(boolean_value)`: Зміна значення.
   - `ternary_check(condition, result_true, result_false)`: Тернарна перевірка.
   - `validate(x, y, z)`: Валідація.
   - `chain_check(a, b, c)`: Ланцюгова перевірка.
   - `filter_true(bool_list)`: Фільтрація істинних значень.
   - `multiplexer(bool1, bool2, bool3, integer)`: Мультиплексування.

## 5. Результати
Програма успішно реалізує всі вказані функції. Нижче наведено декілька прикладів використання.

### Приклади використання

```python
# Приклади використання функцій

# Перевірка істинності
print(check_truth(True, False, True))  # True

# Логічна еквівалентність
print(logical_equivalence(True, False))  # False

# XOR
print(xor(True, False))  # True

# Умовне вітання
print(greet(True))  # Hello, World!

# Вкладені умови
print(nested_condition(1, 2, 3))  # All different

# Підрахунок істинних значень у списку
print(count_true([True, False, True, True]))  # 3

# Визначення парності числа
print(parity(10))  # True

# Більшість голосів
print(majority_vote(True, True, False))  # True

# Зміна значення
print(switch(True))  # False

# Тернарна перевірка
print(ternary_check(True, "Yes", "No"))  # Yes

# Валідація
print(validate(True, False, True))  # True

# Ланцюгова перевірка
print(chain_check(1, 2, 3))  # Increasing

# Фільтрація істинних значень
print(filter_true([True, False, True]))  # [True, True]

# Мультиплексування
print(multiplexer(True, False, False, 5))  # 10

### 6. Висновки
Мета роботи досягнута. Функції успішно реалізовані і протестовані на прикладах використання.

### 7. Інструкції з запуску
Для запуску програми потрібен Python версії 3.x.

